var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "replaceHTMLTest", function () {
  return replaceHTMLTest;
});
_parcelHelpers.export(exports, "displayTime", function () {
  return displayTime;
});
var _Dom = require('./Dom');
/*//basically a div over another div thats disappearing over the span of a specified length of time

const timerBar = document.querySelector('timerBar');
setInterval(() => {
const computedStyle = getComputedStyle(timerBar); //get current width and then increment based on percentage loaded-> get computedStyle and then use parsefloat to take width and convert to number -> get property value for --width
const width = parseFloat(computedStyle.getPropertyValue('--width')) || 0;
//once page loads,no width supplied, not a number, defaulted to 0
timerBar.style.setProperty('--width', width + 0.1);
}, 15); //calls on function every 15 seconds

//parseFloat converts string to number, but why is this necessary?>????
*/
// const timer = document.querySelector('.timer');
// const timeSecond = 5;
// const timer = docuument.querySelector('h1');
let timeSecond = 70;
_Dom.DOMSelectors.timer.innerHTML = `00:${timeSecond}`;
// makes direct changes to .timer div
displayTime(timeSecond);
const countDown = setInterval(() => {
  timeSecond--;
  displayTime(timeSecond);
  if (timeSecond <= 0 || timeSecond < 1) {
    clearInterval(countDown);
  }
}, 1000);
function displayTime(second) {
  const min = Math.floor(second / 60);
  const sec = Math.floor(second % 60);
  DomSelectors.timer.innerHTML = `${min < 10 ? '0' : ''}${min}:${sec < 10 ? '0' : ''}${sec}`;
}
function endTime() {
  timer.innerHTML = 'YUR DONE!';
}
function replaceHTMLTest() {
  _Dom.DOMSelectors.timer.innerHTML = `00:${timeSecond}`;
}
